1. ct (Call tree)

  Generate a static call tree by using gcc-generated RTL files. Right now
  it is used for C only.

  This works only if the project can be compiled by gcc.

1.1 Usage:

** 1.

  Add following option to CFLAG, telling gcc to generate RTL file.

  CFLAGS += -dr -O0 --no-inline

** 2.

  Compile, and then collect names of generated RTL files (with .expand
  surfix) in a list:

  find | grep '\.expand$' > exp_list

** 3.

  Generate index file.

  ct -g -l exp_list -f xxx.ct_idx

** 4.

  Use the index file to show call tree.

  eg. cg -f xxx.ct_idx __alloc_pages

2. st (Struct tree)

  This program parses the st file generated by the modified gcc and print
  out a strut tree. Right now it is used for C only.

2.1 Usage:

** 1.

  Apply st_gcc.patch to gcc source code. This patch is made with
  gcc-4.3.3. Other version of gcc may need modification by hand.

  Compile the gcc source code to get a modified gcc.

** 2.

  Use the modified gcc to compile the file you are interested in, for
  example, a.c.

  a.st will be generated if there is no error.

** 3.

  Use the .st file to generate a struct tree, with the .st file and the
  name of the struct you are interested in as parameters.

  eg. st a.st struct_a
